{"_id":"monocle","_rev":"40-ed41715c16a3155f99a3322fa84a7e44","name":"monocle","description":"a tool for watching directories for file changes","dist-tags":{"latest":"1.1.51"},"versions":{"0.1.0":{"name":"monocle","version":"0.1.0","description":"a tool for watching directories for file changes","main":"monocle.js","directories":{"test":"test"},"dependencies":{"readdirp":"~0.2.3","underscore":"~1.4.4"},"devDependencies":{},"scripts":{"test":"mocha test"},"repository":"","keywords":["watch","filesystem","folders","fs"],"author":{"name":"Sam Saccone"},"license":"BSD","readme":"**Monocle -- a tool for watching things**\n\n`npm install monocle`\n\n`var Monocle = require('monocle')\n (new Monocle).watchDirectory(dir, cb, watchSetupComplete, fileFilers, directoryFilters);\n`\n\n\n## Filters\n\nThere are three different ways to specify filters for files and directories respectively.\n\n- **function**: a function that takes an entry info as a parameter and returns true to include or false to exclude the entry\n\n- **glob string**: a string (e.g., `*.js`) which is matched using [minimatch](https://github.com/isaacs/minimatch), so go there for more\n    information.\n\n    Globstars (`**`) are not supported since specifiying a recursive pattern for an already recursive function doesn't make sense.\n\n    Negated globs (as explained in the minimatch documentation) are allowed, e.g., `!*.txt` matches everything but text files.\n\n- **array of glob strings**: either need to be all inclusive or all exclusive (negated) patterns otherwise an error is thrown.\n\n    `[ '*.json', '*.js' ]` includes all JavaScript and Json files.\n\n\n    `[ '!.git', '!node_modules' ]` includes all directories except the '.git' and 'node_modules'.\n\nDirectories that do not pass a filter will not be recursed into.","readmeFilename":"README.md","_id":"monocle@0.1.0","dist":{"shasum":"b9bfb9a4edd1953d196627f5957a0a2c03e1519f","tarball":"http://registry.npmjs.org/monocle/-/monocle-0.1.0.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"samccone","email":"samccone@gmail.com"},"maintainers":[{"name":"samccone","email":"samccone@gmail.com"}]},"0.1.1":{"name":"monocle","version":"0.1.1","description":"a tool for watching directories for file changes","main":"monocle.js","directories":{"test":"test"},"dependencies":{"readdirp":"~0.2.3","underscore":"~1.4.4"},"devDependencies":{"mocha":"1.8.1"},"scripts":{"test":"mocha test"},"repository":"","keywords":["watch","filesystem","folders","fs"],"author":{"name":"Sam Saccone"},"license":"BSD","readme":"[![Build Status](https://travis-ci.org/samccone/monocle.png?branch=master)](https://travis-ci.org/samccone/monocle)\n\n## Monocle -- a tool for watching things**\n\n`npm install monocle`\n\n`var Monocle = require('monocle')\n (new Monocle).watchDirectory(dir, cb, watchSetupComplete, fileFilers, directoryFilters);\n`\n\n\n# Filters\n\nThere are three different ways to specify filters for files and directories respectively.\n\n- **function**: a function that takes an entry info as a parameter and returns true to include or false to exclude the entry\n\n- **glob string**: a string (e.g., `*.js`) which is matched using [minimatch](https://github.com/isaacs/minimatch), so go there for more\n    information.\n\n    Globstars (`**`) are not supported since specifiying a recursive pattern for an already recursive function doesn't make sense.\n\n    Negated globs (as explained in the minimatch documentation) are allowed, e.g., `!*.txt` matches everything but text files.\n\n- **array of glob strings**: either need to be all inclusive or all exclusive (negated) patterns otherwise an error is thrown.\n\n    `[ '*.json', '*.js' ]` includes all JavaScript and Json files.\n\n\n    `[ '!.git', '!node_modules' ]` includes all directories except the '.git' and 'node_modules'.\n\nDirectories that do not pass a filter will not be recursed into.","readmeFilename":"README.md","_id":"monocle@0.1.1","dist":{"shasum":"8c6cb02dfc78f30451a9366ab14f4dee282b28d1","tarball":"http://registry.npmjs.org/monocle/-/monocle-0.1.1.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"samccone","email":"samccone@gmail.com"},"maintainers":[{"name":"samccone","email":"samccone@gmail.com"}]},"0.1.15":{"name":"monocle","version":"0.1.15","description":"a tool for watching directories for file changes","main":"monocle.js","directories":{"test":"test"},"dependencies":{"readdirp":"~0.2.3","underscore":"~1.4.4"},"devDependencies":{"mocha":"1.8.1"},"scripts":{"test":"mocha test"},"repository":"","keywords":["watch","filesystem","folders","fs"],"author":{"name":"Sam Saccone"},"license":"BSD","readme":"[![Build Status](https://travis-ci.org/samccone/monocle.png?branch=master)](https://travis-ci.org/samccone/monocle)\n\n## Monocle -- a tool for watching things\n\n[![logo](https://raw.github.com/samccone/monocle/master/logo.png)](https://raw.github.com/samccone/monocle/master/logo.png)\n\nHave you ever wanted to watch a folder and all of its files/nested folders for changes. well now you can!\n\n`npm install monocle`\n\n\n`var Monocle = require('monocle')`\n\n` (new Monocle).watchDirectory(dir, cb, watchSetupComplete, fileFilers, directoryFilters);`\n\nthe callback gets the filename that was modified\n\n## Filters\n\n- Read about it here [READDIRP](https://github.com/thlorenz/readdirp)","readmeFilename":"README.md","_id":"monocle@0.1.15","dist":{"shasum":"312f4e86c2b580531868e937315562a7607d0d7b","tarball":"http://registry.npmjs.org/monocle/-/monocle-0.1.15.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"samccone","email":"samccone@gmail.com"},"maintainers":[{"name":"samccone","email":"samccone@gmail.com"}]},"0.1.2":{"name":"monocle","version":"0.1.2","description":"a tool for watching directories for file changes","main":"monocle.js","directories":{"test":"test"},"dependencies":{"readdirp":"~0.2.3","underscore":"~1.4.4"},"devDependencies":{"mocha":"1.8.1"},"scripts":{"test":"mocha test -R spec -t 2000"},"repository":"","keywords":["watch","filesystem","folders","fs"],"author":{"name":"Sam Saccone"},"license":"BSD","readme":"[![Build Status](https://travis-ci.org/samccone/monocle.png?branch=master)](https://travis-ci.org/samccone/monocle)\n\n## Monocle -- a tool for watching things\n\n[![logo](https://raw.github.com/samccone/monocle/master/logo.png)](https://raw.github.com/samccone/monocle/master/logo.png)\n\nHave you ever wanted to watch a folder and all of its files/nested folders for changes. well now you can!\n\n`npm install monocle`\n\n\n`var Monocle = require('monocle')`\n\n` (new Monocle).watchDirectory(dir, cb, watchSetupComplete, fileFilers, directoryFilters);`\n\nthe callback gets the filename that was modified\n\n## Filters\n\n- Read about it here [READDIRP](https://github.com/thlorenz/readdirp)","readmeFilename":"README.md","_id":"monocle@0.1.2","dist":{"shasum":"fc609ea794488d9362b70b51c71bc8a461eeddcc","tarball":"http://registry.npmjs.org/monocle/-/monocle-0.1.2.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"samccone","email":"samccone@gmail.com"},"maintainers":[{"name":"samccone","email":"samccone@gmail.com"}]},"0.1.3":{"name":"monocle","version":"0.1.3","description":"a tool for watching directories for file changes","main":"monocle.js","directories":{"test":"test"},"dependencies":{"readdirp":"~0.2.3","underscore":"~1.4.4"},"devDependencies":{"mocha":"1.8.1"},"scripts":{"test":"mocha test -R spec -t 2000"},"repository":"","keywords":["watch","filesystem","folders","fs"],"author":{"name":"Sam Saccone"},"license":"BSD","readme":"[![Build Status](https://travis-ci.org/samccone/monocle.png?branch=master)](https://travis-ci.org/samccone/monocle)\n\n## Monocle -- a tool for watching things\n\n[![logo](https://raw.github.com/samccone/monocle/master/logo.png)](https://raw.github.com/samccone/monocle/master/logo.png)\n\nHave you ever wanted to watch a folder and all of its files/nested folders for changes. well now you can!\n\n`npm install monocle`\n\n\n`var Monocle = require('monocle')`\n\n` (new Monocle).watchDirectory(dir, cb, watchSetupComplete, fileFilers, directoryFilters);`\n\n### or watch an array of files\n\n` (new Monocle).watchFiles(files[], cb, watchSetupComplete);`\n\nthe callback gets the filename that was modified\n\n## Filters\n\n- Read about it here [READDIRP](https://github.com/thlorenz/readdirp)","readmeFilename":"README.md","_id":"monocle@0.1.3","dist":{"shasum":"e511e4364a4ce6bdb519fa84b244f22dd3688dcb","tarball":"http://registry.npmjs.org/monocle/-/monocle-0.1.3.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"samccone","email":"samccone@gmail.com"},"maintainers":[{"name":"samccone","email":"samccone@gmail.com"}]},"0.1.4":{"name":"monocle","version":"0.1.4","description":"a tool for watching directories for file changes","main":"monocle.js","directories":{"test":"test"},"dependencies":{"readdirp":"~0.2.3"},"devDependencies":{"mocha":"1.8.1"},"scripts":{"test":"mocha test -R spec -t 2000"},"repository":"","keywords":["watch","filesystem","folders","fs"],"author":{"name":"Sam Saccone"},"license":"BSD","readme":"[![Build Status](https://travis-ci.org/samccone/monocle.png?branch=master)](https://travis-ci.org/samccone/monocle)\n\n## Monocle -- a tool for watching things\n\n[![logo](https://raw.github.com/samccone/monocle/master/logo.png)](https://raw.github.com/samccone/monocle/master/logo.png)\n\nHave you ever wanted to watch a folder and all of its files/nested folders for changes. well now you can!\n\n`npm install monocle`\n\n\n`var Monocle = require('monocle')`\n\n` (new Monocle).watchDirectory(dir, cb, watchSetupComplete, fileFilers, directoryFilters);`\n\n### or watch an array of files\n\n` (new Monocle).watchFiles(files[], cb, watchSetupComplete);`\n\nthe callback gets the filename that was modified\n\n## Filters\n\n- Read about it here [READDIRP](https://github.com/thlorenz/readdirp)","readmeFilename":"README.md","_id":"monocle@0.1.4","dist":{"shasum":"9df5b3adff2a177036b6e2bf19cdb5cfa2b418eb","tarball":"http://registry.npmjs.org/monocle/-/monocle-0.1.4.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"samccone","email":"samccone@gmail.com"},"maintainers":[{"name":"samccone","email":"samccone@gmail.com"}]},"0.1.40":{"name":"monocle","version":"0.1.40","description":"a tool for watching directories for file changes","main":"monocle.js","directories":{"test":"test"},"dependencies":{"readdirp":"~0.2.3"},"devDependencies":{"mocha":"1.8.1"},"scripts":{"test":"mocha test -R spec -t 2000"},"repository":"","keywords":["watch","filesystem","folders","fs"],"author":{"name":"Sam Saccone"},"license":"BSD","readme":"[![Build Status](https://travis-ci.org/samccone/monocle.png?branch=master)](https://travis-ci.org/samccone/monocle)\n\n## Monocle -- a tool for watching things\n\n[![logo](https://raw.github.com/samccone/monocle/master/logo.png)](https://raw.github.com/samccone/monocle/master/logo.png)\n\nHave you ever wanted to watch a folder and all of its files/nested folders for changes. well now you can!\n\n## How to use\n\n`npm install monocle`\n\n`var Monocle = require('monocle')()`\n\n    Monocle.watchDirectory({\n      root: <root directory>,\n      fileFilter: <optional>,\n      directoryFilter: <optional>,\n      complete: <fn>, //triggered on file change\n      callback: fn(filename) //file watching all set up\n    });\n\n##### Or watch a list of files\n\n    Monocle.watchFiles({\n      files: [], //path of file(s)\n      callback: <cb(filename)>, //triggered on file change\n      complete: <fn> //file watching all set up\n    });\n\n## Why?\n#### Why not just use fs.watch ?\n  - file watching is really bad cross platforms in node\n  - you need to be smart when using fs.watch as compared to fs.watchFile\n  - Monocle takes care of this logic for you!\n  - windows systems use fs.watch\n  - osx and linux uses fs.watchFile\n\n## Filters\n\n- Read about it here [READDIRP](https://github.com/thlorenz/readdirp)\n","readmeFilename":"README.md","_id":"monocle@0.1.40","dist":{"shasum":"a1c15651a971c2d1c20de16fb3764460752f7c6d","tarball":"http://registry.npmjs.org/monocle/-/monocle-0.1.40.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"samccone","email":"samccone@gmail.com"},"maintainers":[{"name":"samccone","email":"samccone@gmail.com"}]},"0.1.41":{"name":"monocle","version":"0.1.41","description":"a tool for watching directories for file changes","main":"monocle.js","directories":{"test":"test"},"dependencies":{"readdirp":"~0.2.3"},"devDependencies":{"mocha":"1.8.1"},"scripts":{"test":"mocha test -R spec -t 2000"},"repository":"","keywords":["watch","filesystem","folders","fs"],"author":{"name":"Sam Saccone"},"license":"BSD","readme":"[![Build Status](https://travis-ci.org/samccone/monocle.png?branch=master)](https://travis-ci.org/samccone/monocle)\n\n# Monocle -- a tool for watching things\n\n[![logo](https://raw.github.com/samccone/monocle/master/logo.png)](https://raw.github.com/samccone/monocle/master/logo.png)\n\nHave you ever wanted to watch a folder and all of its files/nested folders for changes. well now you can!\n\n## Installation\n\n```\nnpm install monocle\n```\n\n## Usage\n\n### Watch a directory:\n\n```js\nvar monocle = require('monocle')()\nmonocle.watchDirectory({\n  root: <root directory>,\n  fileFilter: <optional>,\n  directoryFilter: <optional>,\n  callback: fn(filename), //triggered on file change\n  complete: <fn> //file watching all set up\n});\n```\n\nThe two filters are passed through to `readdirp`.  More documentation can be found [here](https://github.com/thlorenz/readdirp#filters)\n\n### Watch a list of files:\n\n```js\nMonocle.watchFiles({\n  files: [], //path of file(s)\n  callback: <cb(filename)>, //triggered on file change\n  complete: <fn> //file watching all set up\n});\n```\n\n## Why not just use fs.watch ?\n\n  - file watching is really bad cross platforms in node\n  - you need to be smart when using fs.watch as compared to fs.watchFile\n  - Monocle takes care of this logic for you!\n  - windows systems use fs.watch\n  - osx and linux uses fs.watchFile\n\n\n## License\n\nBSD\n","readmeFilename":"README.md","_id":"monocle@0.1.41","dist":{"shasum":"decc2ad3d7e7fdc2ccfea76b13fd5300a9e9a14c","tarball":"http://registry.npmjs.org/monocle/-/monocle-0.1.41.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"samccone","email":"samccone@gmail.com"},"maintainers":[{"name":"samccone","email":"samccone@gmail.com"}]},"0.1.42":{"name":"monocle","version":"0.1.42","description":"a tool for watching directories for file changes","main":"monocle.js","directories":{"test":"test"},"dependencies":{"readdirp":"~0.2.3"},"devDependencies":{"mocha":"1.8.1"},"scripts":{"test":"mocha test -R spec -t 2000"},"repository":"","keywords":["watch","filesystem","folders","fs"],"author":{"name":"Sam Saccone"},"license":"BSD","readme":"[![Build Status](https://travis-ci.org/samccone/monocle.png?branch=master)](https://travis-ci.org/samccone/monocle)\n\n# Monocle -- a tool for watching things\n\n[![logo](https://raw.github.com/samccone/monocle/master/logo.png)](https://raw.github.com/samccone/monocle/master/logo.png)\n\nHave you ever wanted to watch a folder and all of its files/nested folders for changes. well now you can!\n\n## Installation\n\n```\nnpm install monocle\n```\n\n## Usage\n\n### Watch a directory:\n\n```js\nvar monocle = require('monocle')()\nmonocle.watchDirectory({\n  root: <root directory>,\n  fileFilter: <optional>,\n  directoryFilter: <optional>,\n  callback: fn(filename), //triggered on file change\n  complete: <fn(fs.stat+ object)> //file watching all set up\n});\n```\n\nThe callback will recive an object with the following\n\n```js\n  name: <filename>,\n  path: <filepath-relative>,\n  fullPath: <filepath-absolute>,\n  parentDir: <parentDir-relative>,\n  fullParentDir: <parentDir-absolute>,\n  stat: <see fs.stats>\n```\n\n[fs.stats](http://nodejs.org/api/fs.html#fs_class_fs_stats)\n\nWhen a new file is added to the directoy it triggers a file change and thus will be passed to your specified callback.\n\nThe two filters are passed through to `readdirp`.  More documentation can be found [here](https://github.com/thlorenz/readdirp#filters)\n\n### Watch a list of files:\n\n```js\nMonocle.watchFiles({\n  files: [], //path of file(s)\n  callback: <fn(fs.stat+ object)>, //triggered on file change\n  complete: <fn> //file watching all set up\n});\n```\n\n## Why not just use fs.watch ?\n\n  - file watching is really bad cross platforms in node\n  - you need to be smart when using fs.watch as compared to fs.watchFile\n  - Monocle takes care of this logic for you!\n  - windows systems use fs.watch\n  - osx and linux uses fs.watchFile\n\n\n## License\n\nBSD\n","readmeFilename":"README.md","_id":"monocle@0.1.42","dist":{"shasum":"f19175fec9ba79c937fb2a3149650dd94716e3ff","tarball":"http://registry.npmjs.org/monocle/-/monocle-0.1.42.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"samccone","email":"samccone@gmail.com"},"maintainers":[{"name":"samccone","email":"samccone@gmail.com"}]},"0.1.43":{"name":"monocle","version":"0.1.43","description":"a tool for watching directories for file changes","main":"monocle.js","directories":{"test":"test"},"dependencies":{"readdirp":"~0.2.3"},"devDependencies":{"mocha":"1.8.1"},"scripts":{"test":"mocha test -R spec -t 2000"},"repository":"","keywords":["watch","filesystem","folders","fs"],"author":{"name":"Sam Saccone"},"license":"BSD","readme":"[![Build Status](https://travis-ci.org/samccone/monocle.png?branch=master)](https://travis-ci.org/samccone/monocle)\n\n# Monocle -- a tool for watching things\n\n[![logo](https://raw.github.com/samccone/monocle/master/logo.png)](https://raw.github.com/samccone/monocle/master/logo.png)\n\nHave you ever wanted to watch a folder and all of its files/nested folders for changes. well now you can!\n\n## Installation\n\n```\nnpm install monocle\n```\n\n## Usage\n\n### Watch a directory:\n\n```js\nvar monocle = require('monocle')()\nmonocle.watchDirectory({\n  root: <root directory>,\n  fileFilter: <optional>,\n  directoryFilter: <optional>,\n  listener: fn(fs.stat+ object), //triggered on file change / addition\n  complete: <fn> //file watching all set up\n});\n```\n\nThe listener will recive an object with the following\n\n```js\n  name: <filename>,\n  path: <filepath-relative>,\n  fullPath: <filepath-absolute>,\n  parentDir: <parentDir-relative>,\n  fullParentDir: <parentDir-absolute>,\n  stat: <see fs.stats>\n```\n\n[fs.stats](http://nodejs.org/api/fs.html#fs_class_fs_stats)\n\nWhen a new file is added to the directoy it triggers a file change and thus will be passed to your specified listener.\n\nThe two filters are passed through to `readdirp`.  More documentation can be found [here](https://github.com/thlorenz/readdirp#filters)\n\n### Watch a list of files:\n\n```js\nMonocle.watchFiles({\n  files: [], //path of file(s)\n  listener: <fn(fs.stat+ object)>, //triggered on file / addition\n  complete: <fn> //file watching all set up\n});\n```\n\n## Why not just use fs.watch ?\n\n  - file watching is really bad cross platforms in node\n  - you need to be smart when using fs.watch as compared to fs.watchFile\n  - Monocle takes care of this logic for you!\n  - windows systems use fs.watch\n  - osx and linux uses fs.watchFile\n\n\n## License\n\nBSD\n","readmeFilename":"README.md","_id":"monocle@0.1.43","dist":{"shasum":"644d0e91bd8515bc00ef78a8ac379578332e82b9","tarball":"http://registry.npmjs.org/monocle/-/monocle-0.1.43.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"samccone","email":"samccone@gmail.com"},"maintainers":[{"name":"samccone","email":"samccone@gmail.com"}]},"0.1.45":{"name":"monocle","version":"0.1.45","description":"a tool for watching directories for file changes","main":"monocle.js","directories":{"test":"test"},"dependencies":{"readdirp":"~0.2.3"},"devDependencies":{"mocha":"1.8.1"},"scripts":{"test":"mocha test -R spec -t 2000"},"repository":"","keywords":["watch","filesystem","folders","fs"],"author":{"name":"Sam Saccone"},"license":"BSD","readme":"[![Build Status](https://travis-ci.org/samccone/monocle.png?branch=master)](https://travis-ci.org/samccone/monocle)\n\n# Monocle -- a tool for watching things\n\n[![logo](https://raw.github.com/samccone/monocle/master/logo.png)](https://raw.github.com/samccone/monocle/master/logo.png)\n\nHave you ever wanted to watch a folder and all of its files/nested folders for changes. well now you can!\n\n## Installation\n\n```\nnpm install monocle\n```\n\n## Usage\n\n### Watch a directory:\n\n```js\nvar monocle = require('monocle')()\nmonocle.watchDirectory({\n  root: <root directory>,\n  fileFilter: <optional>,\n  directoryFilter: <optional>,\n  listener: fn(fs.stat+ object), //triggered on file change / addition\n  complete: <fn> //file watching all set up\n});\n```\n\nThe listener will recive an object with the following\n\n```js\n  name: <filename>,\n  path: <filepath-relative>,\n  fullPath: <filepath-absolute>,\n  parentDir: <parentDir-relative>,\n  fullParentDir: <parentDir-absolute>,\n  stat: <see fs.stats>\n```\n\n[fs.stats](http://nodejs.org/api/fs.html#fs_class_fs_stats)\n\nWhen a new file is added to the directoy it triggers a file change and thus will be passed to your specified listener.\n\nThe two filters are passed through to `readdirp`.  More documentation can be found [here](https://github.com/thlorenz/readdirp#filters)\n\n### Watch a list of files:\n\n```js\nMonocle.watchFiles({\n  files: [], //path of file(s)\n  listener: <fn(fs.stat+ object)>, //triggered on file / addition\n  complete: <fn> //file watching all set up\n});\n```\n\n## Why not just use fs.watch ?\n\n  - file watching is really bad cross platforms in node\n  - you need to be smart when using fs.watch as compared to fs.watchFile\n  - Monocle takes care of this logic for you!\n  - windows systems use fs.watch\n  - osx and linux uses fs.watchFile\n\n\n## License\n\nBSD\n","readmeFilename":"README.md","_id":"monocle@0.1.45","dist":{"shasum":"9d29d228ce5830fb11b5aaf7d081f88824f558ad","tarball":"http://registry.npmjs.org/monocle/-/monocle-0.1.45.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"samccone","email":"samccone@gmail.com"},"maintainers":[{"name":"samccone","email":"samccone@gmail.com"}]},"0.1.46":{"name":"monocle","version":"0.1.46","description":"a tool for watching directories for file changes","main":"monocle.js","directories":{"test":"test"},"dependencies":{"readdirp":"~0.2.3"},"devDependencies":{"mocha":"1.8.1"},"scripts":{"test":"mocha test -R spec -t 2000"},"repository":"","keywords":["watch","filesystem","folders","fs"],"author":{"name":"Sam Saccone"},"license":"BSD","readme":"[![Build Status](https://travis-ci.org/samccone/monocle.png?branch=master)](https://travis-ci.org/samccone/monocle)\n\n# Monocle -- a tool for watching things\n\n[![logo](https://raw.github.com/samccone/monocle/master/logo.png)](https://raw.github.com/samccone/monocle/master/logo.png)\n\nHave you ever wanted to watch a folder and all of its files/nested folders for changes. well now you can!\n\n## Installation\n\n```\nnpm install monocle\n```\n\n## Usage\n\n### Watch a directory:\n\n```js\nvar monocle = require('monocle')()\nmonocle.watchDirectory({\n  root: <root directory>,\n  fileFilter: <optional>,\n  directoryFilter: <optional>,\n  listener: fn(fs.stat+ object), //triggered on file change / addition\n  complete: <fn> //file watching all set up\n});\n```\n\nThe listener will recive an object with the following\n\n```js\n  name: <filename>,\n  path: <filepath-relative>,\n  fullPath: <filepath-absolute>,\n  parentDir: <parentDir-relative>,\n  fullParentDir: <parentDir-absolute>,\n  stat: <see fs.stats>\n```\n\n[fs.stats](http://nodejs.org/api/fs.html#fs_class_fs_stats)\n\nWhen a new file is added to the directoy it triggers a file change and thus will be passed to your specified listener.\n\nThe two filters are passed through to `readdirp`.  More documentation can be found [here](https://github.com/thlorenz/readdirp#filters)\n\n### Watch a list of files:\n\n```js\nMonocle.watchFiles({\n  files: [], //path of file(s)\n  listener: <fn(fs.stat+ object)>, //triggered on file / addition\n  complete: <fn> //file watching all set up\n});\n```\n\n## Why not just use fs.watch ?\n\n  - file watching is really bad cross platforms in node\n  - you need to be smart when using fs.watch as compared to fs.watchFile\n  - Monocle takes care of this logic for you!\n  - windows systems use fs.watch\n  - osx and linux uses fs.watchFile\n\n\n## License\n\nBSD\n","readmeFilename":"README.md","_id":"monocle@0.1.46","dist":{"shasum":"32ff9137fd3ee31d2d69a29db2f8a69389cd9860","tarball":"http://registry.npmjs.org/monocle/-/monocle-0.1.46.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"samccone","email":"samccone@gmail.com"},"maintainers":[{"name":"samccone","email":"samccone@gmail.com"}]},"0.1.47":{"name":"monocle","version":"0.1.47","description":"a tool for watching directories for file changes","main":"monocle.js","directories":{"test":"test"},"dependencies":{"readdirp":"~0.2.3"},"devDependencies":{"mocha":"1.8.1"},"scripts":{"test":"mocha test -R spec -t 2000"},"repository":"","keywords":["watch","filesystem","folders","fs"],"author":{"name":"Sam Saccone"},"license":"BSD","readme":"[![Build Status](https://travis-ci.org/samccone/monocle.png?branch=master)](https://travis-ci.org/samccone/monocle)\n\n# Monocle -- a tool for watching things\n\n[![logo](https://raw.github.com/samccone/monocle/master/logo.png)](https://raw.github.com/samccone/monocle/master/logo.png)\n\nHave you ever wanted to watch a folder and all of its files/nested folders for changes. well now you can!\n\n## Installation\n\n```\nnpm install monocle\n```\n\n## Usage\n\n### Watch a directory:\n\n```js\nvar monocle = require('monocle')()\nmonocle.watchDirectory({\n  root: <root directory>,\n  fileFilter: <optional>,\n  directoryFilter: <optional>,\n  listener: fn(fs.stat+ object), //triggered on file change / addition\n  complete: <fn> //file watching all set up\n});\n```\n\nThe listener will recive an object with the following\n\n```js\n  name: <filename>,\n  path: <filepath-relative>,\n  fullPath: <filepath-absolute>,\n  parentDir: <parentDir-relative>,\n  fullParentDir: <parentDir-absolute>,\n  stat: <see fs.stats>\n```\n\n[fs.stats](http://nodejs.org/api/fs.html#fs_class_fs_stats)\n\nWhen a new file is added to the directoy it triggers a file change and thus will be passed to your specified listener.\n\nThe two filters are passed through to `readdirp`.  More documentation can be found [here](https://github.com/thlorenz/readdirp#filters)\n\n### Watch a list of files:\n\n```js\nMonocle.watchFiles({\n  files: [], //path of file(s)\n  listener: <fn(fs.stat+ object)>, //triggered on file / addition\n  complete: <fn> //file watching all set up\n});\n```\n\n## Why not just use fs.watch ?\n\n  - file watching is really bad cross platforms in node\n  - you need to be smart when using fs.watch as compared to fs.watchFile\n  - Monocle takes care of this logic for you!\n  - windows systems use fs.watch\n  - osx and linux uses fs.watchFile\n\n\n## License\n\nBSD\n","readmeFilename":"README.md","_id":"monocle@0.1.47","dist":{"shasum":"5bf672efd238740a14d2352f77ff2ff1c9c768d3","tarball":"http://registry.npmjs.org/monocle/-/monocle-0.1.47.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"samccone","email":"samccone@gmail.com"},"maintainers":[{"name":"samccone","email":"samccone@gmail.com"}]},"0.1.48":{"name":"monocle","version":"0.1.48","description":"a tool for watching directories for file changes","main":"monocle.js","directories":{"test":"test"},"dependencies":{"readdirp":"~0.2.3"},"devDependencies":{"mocha":"1.8.1"},"scripts":{"test":"mocha test -R spec -t 2000"},"repository":{"type":"git","url":"https://github.com/samccone/monocle.git"},"bugs":{"url":"https://github.com/samccone/monocle/issues"},"keywords":["watch","filesystem","folders","fs"],"author":{"name":"Sam Saccone"},"license":"BSD","readme":"[![Build Status](https://travis-ci.org/samccone/monocle.png?branch=master)](https://travis-ci.org/samccone/monocle)\n\n# Monocle -- a tool for watching things\n\n[![logo](https://raw.github.com/samccone/monocle/master/logo.png)](https://raw.github.com/samccone/monocle/master/logo.png)\n\nHave you ever wanted to watch a folder and all of its files/nested folders for changes. well now you can!\n\n## Installation\n\n```\nnpm install monocle\n```\n\n## Usage\n\n### Watch a directory:\n\n```js\nvar monocle = require('monocle')()\nmonocle.watchDirectory({\n  root: <root directory>,\n  fileFilter: <optional>,\n  directoryFilter: <optional>,\n  listener: fn(fs.stat+ object), //triggered on file change / addition\n  complete: <fn> //file watching all set up\n});\n```\n\nThe listener will recive an object with the following\n\n```js\n  name: <filename>,\n  path: <filepath-relative>,\n  fullPath: <filepath-absolute>,\n  parentDir: <parentDir-relative>,\n  fullParentDir: <parentDir-absolute>,\n  stat: <see fs.stats>\n```\n\n[fs.stats](http://nodejs.org/api/fs.html#fs_class_fs_stats)\n\nWhen a new file is added to the directoy it triggers a file change and thus will be passed to your specified listener.\n\nThe two filters are passed through to `readdirp`.  More documentation can be found [here](https://github.com/thlorenz/readdirp#filters)\n\n### Watch a list of files:\n\n```js\nMonocle.watchFiles({\n  files: [], //path of file(s)\n  listener: <fn(fs.stat+ object)>, //triggered on file / addition\n  complete: <fn> //file watching all set up\n});\n```\n\n## Why not just use fs.watch ?\n\n  - file watching is really bad cross platforms in node\n  - you need to be smart when using fs.watch as compared to fs.watchFile\n  - Monocle takes care of this logic for you!\n  - windows systems use fs.watch\n  - osx and linux uses fs.watchFile\n\n## License\n\nBSD\n","readmeFilename":"README.md","_id":"monocle@0.1.48","dist":{"shasum":"b96730f5ca900fa75a56041eb6db10aad980a383","tarball":"http://registry.npmjs.org/monocle/-/monocle-0.1.48.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"samccone","email":"samccone@gmail.com"},"maintainers":[{"name":"samccone","email":"samccone@gmail.com"}]},"0.1.50":{"name":"monocle","version":"0.1.50","description":"a tool for watching directories for file changes","main":"monocle.js","directories":{"test":"test"},"dependencies":{"readdirp":"~0.2.3"},"devDependencies":{"mocha":"1.8.1"},"scripts":{"test":"mocha test -R spec -t 2000"},"repository":{"type":"git","url":"https://github.com/samccone/monocle.git"},"bugs":{"url":"https://github.com/samccone/monocle/issues"},"keywords":["watch","filesystem","folders","fs"],"author":{"name":"Sam Saccone"},"license":"BSD","readme":"[![Build Status](https://travis-ci.org/samccone/monocle.png?branch=master)](https://travis-ci.org/samccone/monocle)\n\n# Monocle -- a tool for watching things\n\n[![logo](https://raw.github.com/samccone/monocle/master/logo.png)](https://raw.github.com/samccone/monocle/master/logo.png)\n\nHave you ever wanted to watch a folder and all of its files/nested folders for changes. well now you can!\n\n## Installation\n\n```\nnpm install monocle\n```\n\n## Usage\n\n### Watch a directory:\n\n```js\nvar monocle = require('monocle')()\nmonocle.watchDirectory({\n  root: <root directory>,\n  fileFilter: <optional>,\n  directoryFilter: <optional>,\n  listener: fn(fs.stat+ object), //triggered on file change / addition\n  complete: <fn> //file watching all set up\n});\n```\n\nThe listener will recive an object with the following\n\n```js\n  name: <filename>,\n  path: <filepath-relative>,\n  fullPath: <filepath-absolute>,\n  parentDir: <parentDir-relative>,\n  fullParentDir: <parentDir-absolute>,\n  stat: <see fs.stats>\n```\n\n[fs.stats](http://nodejs.org/api/fs.html#fs_class_fs_stats)\n\nWhen a new file is added to the directoy it triggers a file change and thus will be passed to your specified listener.\n\nThe two filters are passed through to `readdirp`.  More documentation can be found [here](https://github.com/thlorenz/readdirp#filters)\n\n### Watch a list of files:\n\n```js\nMonocle.watchFiles({\n  files: [], //path of file(s)\n  listener: <fn(fs.stat+ object)>, //triggered on file / addition\n  complete: <fn> //file watching all set up\n});\n```\n\n### Just watch path\n\nJust an alias of `watchFiles` and `watchDirectory` so you don't need to tell if that's a file or a directory by yourself. Parameter passed to `path` can be a `string` or a `array` of `string`.\n\n```js\nMonocle.watchFiles({\n  path: [], //list of pathes, or a string of path\n  listener: <fn(fs.stat+ object)>, //triggered on file / addition\n  complete: <fn> //file watching all set up\n});\n```\n\n## Why not just use fs.watch ?\n\n  - file watching is really bad cross platforms in node\n  - you need to be smart when using fs.watch as compared to fs.watchFile\n  - Monocle takes care of this logic for you!\n  - windows systems use fs.watch\n  - osx and linux uses fs.watchFile\n\n## License\n\nBSD\n","readmeFilename":"README.md","_id":"monocle@0.1.50","dist":{"shasum":"9a7cbd0ccc10de95fd78a04b9beb2482ae4940b7","tarball":"http://registry.npmjs.org/monocle/-/monocle-0.1.50.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"samccone","email":"samccone@gmail.com"},"maintainers":[{"name":"samccone","email":"samccone@gmail.com"}]},"1.1.50":{"name":"monocle","version":"1.1.50","description":"a tool for watching directories for file changes","main":"monocle.js","directories":{"test":"test"},"dependencies":{"readdirp":"~0.2.3"},"devDependencies":{"mocha":"1.8.1"},"scripts":{"test":"mocha test -R spec -t 5000"},"repository":{"type":"git","url":"https://github.com/samccone/monocle.git"},"bugs":{"url":"https://github.com/samccone/monocle/issues"},"keywords":["watch","filesystem","folders","fs"],"author":{"name":"Sam Saccone"},"license":"BSD","readme":"[![Build Status](https://travis-ci.org/samccone/monocle.png?branch=master)](https://travis-ci.org/samccone/monocle)\n\n# Monocle -- a tool for watching things\n\n[![logo](https://raw.github.com/samccone/monocle/master/logo.png)](https://raw.github.com/samccone/monocle/master/logo.png)\n\nHave you ever wanted to watch a folder and all of its files/nested folders for changes. well now you can!\n\n## Installation\n\n```\nnpm install monocle\n```\n\n## Usage\n\n### Watch a directory:\n\n```js\nvar monocle = require('monocle')()\nmonocle.watchDirectory({\n  root: <root directory>,\n  fileFilter: <optional>,\n  directoryFilter: <optional>,\n  listener: fn(fs.stat+ object), //triggered on file change / addition\n  complete: <fn> //file watching all set up\n});\n```\n\nThe listener will recive an object with the following\n\n```js\n  name: <filename>,\n  path: <filepath-relative>,\n  fullPath: <filepath-absolute>,\n  parentDir: <parentDir-relative>,\n  fullParentDir: <parentDir-absolute>,\n  stat: <see fs.stats>\n```\n\n[fs.stats](http://nodejs.org/api/fs.html#fs_class_fs_stats)\n\nWhen a new file is added to the directoy it triggers a file change and thus will be passed to your specified listener.\n\nThe two filters are passed through to `readdirp`.  More documentation can be found [here](https://github.com/thlorenz/readdirp#filters)\n\n### Watch a list of files:\n\n```js\nMonocle.watchFiles({\n  files: [], //path of file(s)\n  listener: <fn(fs.stat+ object)>, //triggered on file / addition\n  complete: <fn> //file watching all set up\n});\n```\n\n### Just watch path\n\nJust an alias of `watchFiles` and `watchDirectory` so you don't need to tell if that's a file or a directory by yourself. Parameter passed to `path` can be a `string` or a `array` of `string`.\n\n```js\nMonocle.watchPaths({\n  path: [], //list of paths, or a string of path\n  fileFilter: <optional>, // `*.js` for example\n  listener: <fn(fs.stat+ object)>, //triggered on file / addition\n  complete: <fn> //file watching all set up\n});\n```\n\n## Why not just use fs.watch ?\n\n  - file watching is really bad cross platforms in node\n  - you need to be smart when using fs.watch as compared to fs.watchFile\n  - Monocle takes care of this logic for you!\n  - windows systems use fs.watch\n  - osx and linux uses fs.watchFile\n\n## License\n\nBSD\n","readmeFilename":"README.md","_id":"monocle@1.1.50","dist":{"shasum":"e21b059d99726d958371f36240c106b8a067fa7d","tarball":"http://registry.npmjs.org/monocle/-/monocle-1.1.50.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"samccone","email":"samccone@gmail.com"},"maintainers":[{"name":"samccone","email":"samccone@gmail.com"}]},"1.1.51":{"name":"monocle","version":"1.1.51","description":"a tool for watching directories for file changes","main":"monocle.js","directories":{"test":"test"},"dependencies":{"readdirp":"~0.2.3"},"devDependencies":{"mocha":"1.8.1"},"scripts":{"test":"mocha test -R spec -t 2000"},"repository":{"type":"git","url":"https://github.com/samccone/monocle.git"},"bugs":{"url":"https://github.com/samccone/monocle/issues"},"keywords":["watch","filesystem","folders","fs"],"author":{"name":"Sam Saccone"},"license":"BSD","readme":"[![Build Status](https://travis-ci.org/samccone/monocle.png?branch=master)](https://travis-ci.org/samccone/monocle)\n\n# Monocle -- a tool for watching things\n\n[![logo](https://raw.github.com/samccone/monocle/master/logo.png)](https://raw.github.com/samccone/monocle/master/logo.png)\n\nHave you ever wanted to watch a folder and all of its files/nested folders for changes. well now you can!\n\n## Installation\n\n```\nnpm install monocle\n```\n\n## Usage\n\n### Watch a directory:\n\n```js\nvar monocle = require('monocle')()\nmonocle.watchDirectory({\n  root: <root directory>,\n  fileFilter: <optional>,\n  directoryFilter: <optional>,\n  listener: fn(fs.stat+ object), //triggered on file change / addition\n  complete: <fn> //file watching all set up\n});\n```\n\nThe listener will recive an object with the following\n\n```js\n  name: <filename>,\n  path: <filepath-relative>,\n  fullPath: <filepath-absolute>,\n  parentDir: <parentDir-relative>,\n  fullParentDir: <parentDir-absolute>,\n  stat: <see fs.stats>\n```\n\n[fs.stats](http://nodejs.org/api/fs.html#fs_class_fs_stats)\n\nWhen a new file is added to the directoy it triggers a file change and thus will be passed to your specified listener.\n\nThe two filters are passed through to `readdirp`.  More documentation can be found [here](https://github.com/thlorenz/readdirp#filters)\n\n### Watch a list of files:\n\n```js\nMonocle.watchFiles({\n  files: [], //path of file(s)\n  listener: <fn(fs.stat+ object)>, //triggered on file / addition\n  complete: <fn> //file watching all set up\n});\n```\n\n### Just watch path\n\nJust an alias of `watchFiles` and `watchDirectory` so you don't need to tell if that's a file or a directory by yourself. Parameter passed to `path` can be a `string` or a `array` of `string`.\n\n```js\nMonocle.watchPaths({\n  path: [], //list of paths, or a string of path\n  fileFilter: <optional>, // `*.js` for example\n  listener: <fn(fs.stat+ object)>, //triggered on file / addition\n  complete: <fn> //file watching all set up\n});\n```\n\n### Force to use fs.watch\n\nYou can use the USE_FS_WATCH env variable set to true, to force this behavior regardless of platform.\n\n## Why not just use fs.watch ?\n\n  - file watching is really bad cross platforms in node\n  - you need to be smart when using fs.watch as compared to fs.watchFile\n  - Monocle takes care of this logic for you!\n  - windows systems use fs.watch\n  - osx and linux uses fs.watchFile\n\n## License\n\nBSD\n","readmeFilename":"README.md","_id":"monocle@1.1.51","dist":{"shasum":"22ed16e112e9b056769c5ccac920e375249d89c0","tarball":"http://registry.npmjs.org/monocle/-/monocle-1.1.51.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"samccone","email":"samccone@gmail.com"},"maintainers":[{"name":"samccone","email":"samccone@gmail.com"}]}},"readme":"**Monocle -- a tool for watching things**\n\n`npm install monocle`\n\n`var Monocle = require('monocle')\n (new Monocle).watchDirectory(dir, cb, watchSetupComplete, fileFilers, directoryFilters);\n`\n\n\n## Filters\n\nThere are three different ways to specify filters for files and directories respectively.\n\n- **function**: a function that takes an entry info as a parameter and returns true to include or false to exclude the entry\n\n- **glob string**: a string (e.g., `*.js`) which is matched using [minimatch](https://github.com/isaacs/minimatch), so go there for more\n    information.\n\n    Globstars (`**`) are not supported since specifiying a recursive pattern for an already recursive function doesn't make sense.\n\n    Negated globs (as explained in the minimatch documentation) are allowed, e.g., `!*.txt` matches everything but text files.\n\n- **array of glob strings**: either need to be all inclusive or all exclusive (negated) patterns otherwise an error is thrown.\n\n    `[ '*.json', '*.js' ]` includes all JavaScript and Json files.\n\n\n    `[ '!.git', '!node_modules' ]` includes all directories except the '.git' and 'node_modules'.\n\nDirectories that do not pass a filter will not be recursed into.","maintainers":[{"name":"samccone","email":"samccone@gmail.com"}],"time":{"modified":"2013-11-02T20:07:13.195Z","created":"2013-02-18T23:01:54.275Z","0.1.0":"2013-02-18T23:01:55.089Z","0.1.1":"2013-02-19T00:06:35.667Z","0.1.15":"2013-02-19T00:18:11.647Z","0.1.2":"2013-02-20T02:59:08.412Z","0.1.3":"2013-03-05T00:42:34.432Z","0.1.4":"2013-04-15T13:54:12.472Z","0.1.40":"2013-04-16T01:55:37.758Z","0.1.41":"2013-04-16T02:06:32.011Z","0.1.42":"2013-04-16T02:37:55.103Z","0.1.43":"2013-04-16T21:21:10.047Z","0.1.45":"2013-04-21T22:53:34.832Z","0.1.46":"2013-04-22T23:11:47.432Z","0.1.47":"2013-04-30T13:28:27.488Z","0.1.48":"2013-05-26T16:18:45.027Z","0.1.50":"2013-06-10T15:47:14.086Z","1.1.50":"2013-06-20T23:49:24.925Z","1.1.51":"2013-11-02T20:07:13.195Z"},"author":{"name":"Sam Saccone"},"users":{"pid":true},"repository":{"type":"git","url":"https://github.com/samccone/monocle.git"},"_attachments":{},"_etag":"\"5KA5FP4H794JYFLZL3QBRQCO0\""}